<?php
/**
 * @file
 * Brightcove module.
 */

use Drupal\brightcove\Entity\BrightcoveAPIClient;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Database\Database;

/**
 * Initiates a Brightcove-to-Drupal sync by adding API clients to the queue.
 *
 * It does nothing if any of the five affected queues is non-empty.
 *
 * Syncing from Brightcove to Drupal works as follows.
 * - This function adds all the API Clients (registered in the Drupal site) to
 *   the brightcove_client_queue_worker.
 * - BrightcoveClientQueueWorker::processItem() counts the videos and the
 *   playlists on that API Client, then adds pages of them to the
 *   brightcove_video_page_queue_worker and
 *   brightcove_playlist_page_queue_worker. All those pages may contain up to
 *   100 items.
 * - Both BrightcoveVideoPageQueueWorker::processItem() and
 *   BrightcovePlaylistPageQueueWorker::processItem() cycles through all the
 *   videos/playlists on that page, and add them to
 *   brightcove_video_queue_worker or brightcove_playlist_queue_worker,
 *   respectively.
 * - Both BrightcoveVideoQueueWorker::processItem() and
 *   BrightcovePlaylistQueueWorker::processItem() process one video/playlist at
 *   a time. However, the latter may throw an exception if it encounters with a
 *   video which is not yet available on the Drupal side. In this case, the
 *   playlist is not removed from the queue with the hope that the affected
 *   video becomes available by the next time this playlist queue item is
 *   processed.
 *
 * This process ensures that syncing from Brightcove to Drupal won't eat up all
 * the server's resources, and those queues are run from cron, and it's even
 * possible to run those queues from batches.
 */
function _brightcove_initiate_sync() {
  // Get queues.
  $client_queue = \Drupal::queue('brightcove_client_queue_worker');
  $video_page_queue = \Drupal::queue('brightcove_video_page_queue_worker');
  $video_queue = \Drupal::queue('brightcove_video_queue_worker');
  $playlist_page_queue = \Drupal::queue('brightcove_playlist_page_queue_worker');
  $playlist_queue = \Drupal::queue('brightcove_playlist_queue_worker');

  // Don't start new sync until all of the queues are not emptied.
  if ($client_queue->numberOfItems() == 0 && $video_page_queue->numberOfItems() == 0 && $video_queue->numberOfItems() == 0 && $playlist_page_queue->numberOfItems() == 0 && $playlist_queue->numberOfItems() == 0) {
    $brightcove_api_clients = BrightcoveAPIClient::loadMultiple();

    /** @var \Drupal\brightcove\Entity\BrightcoveAPIClient $api_client */
    foreach ($brightcove_api_clients as $api_client) {
      $client_queue->createItem($api_client->id());
    }
  }
}

/**
 * Implements hook_cron().
 */
function brightcove_cron() {
  _brightcove_initiate_sync();

  // Delete expired Brightcove callback tokens.
  try {
    Database::getConnection()->delete('brightcove_callback')
      ->condition('expires', time(), '<')
      ->execute();
  }
  catch (\Exception $e) {
    watchdog_exception('Brightcove', $e);
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function brightcove_entity_extra_field_info() {
  $extra = array();

  $extra['brightcove_video']['brightcove_video']['display']['brightcove_video_player'] = [
    'label' => t('Video'),
    'description' => t('The video player'),
    'weight' => -1000,
    'visible' => TRUE,
  ];

  $extra['brightcove_playlist']['brightcove_playlist']['display']['brightcove_playlist_video_player'] = [
    'label' => t('Playlist'),
    'description' => t('The playlist video player'),
    'weight' => -1000,
    'visible' => TRUE,
  ];

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function brightcove_brightcove_video_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('brightcove_video_player')) {
    // Only display the video player if we have all the info needed for it.
    if ($video_id = $entity->getVideoId()) {
      /** @var \Drupal\brightcove\Entity\BrightcoveApiClient $api_client */
      $api_client = BrightcoveAPIClient::load($entity->getAPIClient());
      $build['brightcove_video_player'] = [
        '#theme' => ['brightcove_video_player'],
        '#video_id' => $video_id,
        '#account' => $api_client->getAccountID(),
        '#player' => BrightcoveAPIClient::DEFAULT_PLAYER,
      ];
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function brightcove_brightcove_playlist_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('brightcove_playlist_video_player')) {
    // Only display the video player if we have all the info needed for it.
    if ($playlist_id = $entity->getPlaylistId()) {
      /** @var \Drupal\brightcove\Entity\BrightcoveApiClient $api_client */
      $api_client = BrightcoveAPIClient::load($entity->getAPIClient());
      $build['brightcove_playlist_video_player'] = [
        '#theme' => ['brightcove_playlist_video_player'],
        '#playlist_id' => $playlist_id,
        '#account' => $api_client->getAccountID(),
        '#player' => BrightcoveAPIClient::DEFAULT_PLAYER,
      ];
    }
  }
}

/**
 * Implements hook_theme().
 */
function brightcove_theme($existing, $type, $theme, $path) {
  return [
    'brightcove_video_player' => [
      'variables' => [
        'video_id' => 0,
        'account' => 0,
        'player' => BrightcoveAPIClient::DEFAULT_PLAYER,
        'embed' => 'default',
      ],
    ],
    'brightcove_playlist_video_player' => [
      'variables' => [
        'playlist_id' => 0,
        'account' => 0,
        'player' => BrightcoveAPIClient::DEFAULT_PLAYER,
        'embed' => 'default',
      ],
    ],
  ];
}
