<?php
/**
 * @file
 * Brightcove module is an integration layer between any modules using
 * Brightcove API. It makes all necessary checks for the API and makes
 * settings available to the user.
 *
 * @author
 * Jakub Suchy <jakub@dynamiteheads.com>
 * Parts of code taken from Media Brightcove module by Aaron Winborn - http://advomatic.com
 *
 * Module development sponsored by Brightcove, Inc.
 *
 * References:
 *   - http://docs.brightcove.com/en/media/
 *   - http://support.brightcove.com/en/docs/category/players
 *   - http://support.brightcove.com/en/docs/media-api-error-message-reference
 *   - http://support.brightcove.com/en/docs/media-api-objects-reference
 */

define('BRIGHTCOVE_STATUS_COMPLETE', 'COMPLETE');
define('BRIGHTCOVE_STATUS_ERROR', 'ERROR');

define('BRIGHTCOVE_BCID_NONE', '_none');

// Logo overlay alignment constants
define('BRIGHTCOVE_LOGO_TOP_LEFT', 'TOP_LEFT');
define('BRIGHTCOVE_LOGO_BOTTOM_LEFT', 'BOTTOM_LEFT');
define('BRIGHTCOVE_LOGO_BOTTOM_RIGHT', 'BOTTOM_RIGHT');
define('BRIGHTCOVE_LOGO_TOP_RIGHT', 'TOP_RIGHT');
define('BRIGHTCOVE_LOGO_IMAGE_TYPE', 'LOGO_OVERLAY');


define('BRIGHTCOVE_PLAYLIST_TYPE_MANUAL', 'PLAYLIST_MANUAL');
define('BRIGHTCOVE_PLAYLIST_TYPE_SMART', 'PLAYLIST_SMART');

// Default values
define('BRIGHTCOVE_CACHE_LIFETIME', 600);
define('BRIGHTCOVE_CACHE_FILE_PATH', 'sites/default/files/cache/');
define('BRIGHTCOVE_CACHE_FILE_EXT', 'cache');
define('BRIGHTCOVE_CACHE_MEMCACHE_PATH', 'localhost');
define('BRIGHTCOVE_CACHE_MEMCACHE_PORT', 11211);

// Without this brightcove_playlist_access() is not always found.
require_once 'brightcove.playlist.inc';
require_once 'brightcove.client.inc';
require_once 'brightcove.video.inc';

/**
 * Implements hook_menu().
 */
function brightcove_menu() {
  $items = [];

  $items['brightcove/callback/%'] = [
    'title' => 'Brightcove Ingestion callback',
    'type' => MENU_CALLBACK,
    'page callback' => 'brightcove_handle_ingest_callback',
    'page arguments' => [2],
    'access arguments' => ['access content'],
  ];

  $base = 'admin/config/media/brightcove';

  $items['brightcove/autocomplete/videos/%brightcove_client'] = [
    'title' => 'Video autocomplete',
    'description' => 'Callback function for listing videos in autocomplete fields',
    'type' => MENU_CALLBACK,
    'page callback' => 'brightcove_autocomplete_videos',
    'page arguments' => [3],
    'access arguments' => ['browse videos'],
  ];

  $items[$base] = [
    'title' => 'Brightcove settings',
    'description' => 'Configure Brigthcove integration, api keys, player settings, upload settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['brightcove_admin_settings'],
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => ['administer brightcove settings'],
    'file' => 'brightcove.admin.inc',
  ];

  $items["{$base}/general"] = [
    'title' => 'General',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => ['administer brightcove settings'],
    'weight' => -1,
  ];

  return $items;
}

/**
 * Implements hook_entity_info().
 */
function brightcove_entity_info() {
  $entity_info = [];

  $entity_info['brightcove_client'] = [
    'label' => t('Brightcove client'),
    'base table' => 'brightcove_client',
    'revision table' => 'brightcove_client_revision',
    'uri callback' => 'brightcove_client_uri',
    'controller class' => 'BrightcoveClientEntityController',
    'entity class' => 'Entity',
    'entity keys' => [
      'id' => 'bcid',
      'label' => 'label',
      'revision' => 'revision_id',
    ],
    'admin ui' => [
      'path' => 'admin/config/media/brightcove/client',
      'controller class' => 'BrightcoveClientEntityUIController',
      'file' => 'brightcove.client.inc',
    ],
    'module' => 'brightcove',
    'access callback' => 'brightcove_client_access',
    'permission labels' => [
      'singular' => t('client'),
      'plural' => t('clients')
    ],
  ];

  $entity_info['brightcove_playlist'] = [
    'label' => t('Brightcove playlist'),
    // We don't store playlists locally.
    'base table' => NULL,
    'controller class' => 'BrightcovePlaylistEntityController',
    'entity class' => 'Entity',
    'entity keys' => [
      'id' => 'bpid',
      'label' => 'label',
      'bundle' => 'type',
    ],
    'bundle keys' => [
      'bundle' => 'type',
    ],
    'admin ui' => [
      'path' => 'admin/config/media/brightcove/playlist',
      'controller class' => 'BrightcovePlaylistEntityUIController',
      'file' => 'brightcove.playlist.inc',
      'menu wildcard' => '%brightcove_playlist',
    ],
    'module' => 'brightcove',
    'access callback' => 'brightcove_playlist_access',
    'permission labels' => [
      'singular' => t('playlist'),
      'plural' => t('playlists'),
    ],
    'load hook' => 'brightcove_playlist_load',
    'bundles' => [
      BRIGHTCOVE_PLAYLIST_TYPE_MANUAL => [
        'label' => t('Manual playlist'),
      ],
      BRIGHTCOVE_PLAYLIST_TYPE_SMART => [
        'label' => t('Smart playlist'),
      ],
    ],
  ];
  $entity_info['brightcove_video'] = [
    'label' => t('Brightcove video'),
    'fieldable' => TRUE,
    'base table' => 'brightcove_video',
    'controller class' => 'BrightcoveVideoEntityController',
    'entity class' => 'Entity',
    'entity keys' => [
      'id' => 'bvid',
      'bundle' => 'type',
      'label' => 'label',
    ],
    'bundle keys' => [
      'bundle' => 'type',
    ],
    'module' => 'brightcove',
    'permission labels' => [
      'singular' => t('video'),
      'plural' => t('videos'),
    ],
    'form callback' => 'brightcove_video_form',
    'access callback' => 'brightcove_video_access',
    'bundles' => [
       'brightcove_video' => [
         'label' => t('Brightcove video'),
         'admin' => [
           'path' => 'admin/config/media/brightcove/additional-fields',
           'real path' => 'admin/config/media/brightcove/additional-fields',
         ],
       ],
     ],
     'load hook' => 'brightcove_video_load',

  ];

  return $entity_info;
}

/**
 * Implements hook_field_storage_info().
 */
function brightcove_field_storage_info() {
  return [
    'brightcove_playlist_video_storage' => [
      'label' => t('Storage of playlist videos'),
      'description' => t('Loads and saves the list of videos on a playlist.'),
    ],
  ];
}

/**
 * Implements hook_field_storage_load().
 */
function brightcove_field_storage_load($entity_type, $entities, $age, $fields, $options) {
  if ($entity_type == 'brightcove_playlist') {
    foreach ($fields as $field_id => $ids) {
      $field = field_info_field_by_id($field_id);
      $field_name = $field ['field_name'];
      foreach ($ids as $id) {
        $video_ids = $entities[$id]->playlist->getVideoIds();
        foreach ($video_ids as $video_id) {
          $entities[$id]->{$field_name}[LANGUAGE_NONE][] = [
            'brightcove_id' => $video_id,
            'bcid' => $entities[$id]->client->bcid,
          ];
        }
      }
    }
  }
}

/**
 * Implements hook_field_storage_write().
 */
function brightcove_field_storage_write($entity_type, $entity, $op, $fields) {
  if ($entity_type == 'brightcove_playlist') {
    foreach ($fields as $field_id) {
      $field = field_info_field_by_id($field_id);
      $field_name = $field ['field_name'];
      if ($field['type'] == 'brightcove_field') {
        $videos = field_get_items($entity_type, $entity, $field_name);
        $video_ids = [];
        foreach ($videos as $video_id) {
          $video_ids[] = $video_id['brightcove_id'];
        }
        $entity->playlist->setVideoIds($video_ids);
      }
    }
  }
}

/**
 * Implements hook_libraries_info().
 */
function brightcove_libraries_info() {
  return [
    'PHP-API-Wrapper' => [
      'name' => 'Brightcove API Wrapper',
      'vendor url' => 'https://github.com/brightcove/PHP-API-Wrapper',
      'download url' => 'https://github.com/brightcove/PHP-API-Wrapper/archive/master.zip',
      'version callback' => '_brightcove_api_version',
      'files' => [
        'php' => [
          'brightcove.php',
          'brightcove_cms.php',
          'brightcove_di.php',
        ],
      ],
    ],
  ];
}

/**
 * Load brightcove php wrapper library.
 */
function brightcove_load_lib() {
  libraries_load('PHP-API-Wrapper');
}

/**
 * Version callback for brightcove_libraries_info().
 *
 * @return string
 */
function _brightcove_api_version() {
  return '0.1';
}

/**
 * URI callback for brightcove_client entity.
 */
function brightcove_account_uri($entity) {
  return [
    'path' => 'admin/config/media/brightcove/brightcove_client/' . entity_id('brightcove_client', $entity),
  ];
}

/**
 * Implements hook_permission().
 */
function brightcove_permission() {
  $permissions = [
    'administer brightcove settings' => [
      'title' => t('Administer brightcove'),
    ],
    'browse videos' => [
      'title' => t('Browse videos'),
    ],
    'upload videos' => [
      'title' => t('Upload videos'),
    ],
    'browse playlists' => [
      'title' => t('Browse playlists'),
    ],
    'administer brightcove playlists' => [
      'title' => t('Administer playlists'),
    ],
  ];

  // There's a separate permission for each brightcove client to use them.
  $clients = db_select('brightcove_client', 'bc')
    ->fields('bc', ['bcid', 'label'])
    ->execute()
    ->fetchAllKeyed();
  foreach ($clients as $bcid => $label) {
    $permissions['use brightcove client ' . $bcid] = [
      'title' => t('Use the @label client', ['@label' => $label]),
    ];
  }

  return $permissions;
}

/**
 * Implementation of hook_ctools_plugin_api().
 *
 * Tell CTools that we support the default_mymodule_presets API.
 */
function brightcove_ctools_plugin_api($owner, $api) {
  if ($owner == 'brightcove' && $api == 'brightcove') {
    return ['version' => 1];
  }
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function brightcove_ctools_plugin_directory($module, $type) {
  // Load the export_ui plugin.
  if ($type =='export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Autocomplete callback for listing videos.
 *
 * @param Entity $client
 *  The client entity object to use for aurocompleting videos.
 * @param string $videos_typed
 *  The string of comma-separated videos typed so far.
 */
function brightcove_autocomplete_videos($client, $videos_typed) {
  $matches = [];
  $result = [];

  list($cms,) = _brightcove_create_classes($client);
  $videos_typed = drupal_explode_tags($videos_typed);
  $video_last = drupal_strtolower(array_pop($videos_typed));
  brightcove_try(function () use(&$result, $cms, $video_last) {
    $result = $cms->listVideos($video_last);
  });

  foreach ($result as $video) {
    // Note: Video ID is autogenerated by Brightcove and thus doesn't require XSS protection.
    $matches[check_plain($video->getName()) . ' [id:' . $video->getId() . ']'] = check_plain($video->getName()) . ' [id:' . $video->getId() . ']';
  }

  $prefix = count($videos_typed) ? drupal_implode_tags($videos_typed) . ', ' : '';
  $video_matches = [];
  foreach ($matches as $name) {
    $video_matches[$prefix . $name] = check_plain($name);
  }
  drupal_json_output($video_matches);
}

/**
 * Return the path to the Brightcove MAPI library.
 *
 * If brightcove_variable_get('brightcove_mapi_path') has not yet been set, then
 * this will attempt to autodiscover the path if the bc-mapi.php file exists
 * within sites/all/libraries/* or sites/example.com/libraries/*. It will also
 * set the path to media_brightcove_variable_get('brightcove_mapi_path').
 *
 * The library is available from http://opensource.brightcove.com/project/PHP-MAPI-Wrapper/.
 *
 * @return string
 *   The path to the bc-mapi.php file.
 */
function brightcove_mapi_path() {
  $path = &drupal_static(__FUNCTION__);

  if (!isset($path)) {
    if (!($path = variable_get('brightcove_mapi_path', FALSE))) {
      $files = drupal_system_listing('/^bc-mapi\.php$/', 'libraries',
                                     'filename', 0);
      if (isset($files['bc-mapi.php'])) {
        $path = dirname($files['bc-mapi.php']->uri);
        variable_set('brightcove_mapi_path', $path);
      }
    }
  }

  return $path;
}

/**
 * Implements hook_file_mimetype_mapping_alter().
 *
 * Regsiter the video/brightcove mimetype.
 */
function brightcove_file_mimetype_mapping_alter(&$mapping) {
  $mapping['mimetypes'][] = 'video/brightcove';
}

/**
 * Check a set of API keys to determine write access to Brightcove Studio.
 * Only customers with Professional and higher accounts have write access.
 *
 * @return bool
 *  TRUE for write access allowed.
 *  FALSE for write access forbidden.
 */
function brightcove_write_api_access() {
  return (bool) variable_get('brightcove_write_api_key', FALSE);
}

/**
 * Loads Brightcove video from CMS API.
 *
 * Uses a 5 minutes cache to speed up lookups.
 *
 * @param string $video_id
 * @param stdClass $client_entity
 * @param bool $reset
 *
 * @return BrightcoveVideo|bool
 *  Video object or FALSE on failure.
 */
function brightcove_load_video($video_id, $client_entity, $reset = FALSE) {
  if (!$client_entity) {
    return FALSE;
  }

  brightcove_load_lib();
  $cid = "brightcove:video:{$video_id}:{$client_entity->bcid}";
  $cache = brightcove_cache_get($cid);
  if (!empty($cache) && !$reset) {
    return $cache;
  }
  else {
    list($cms,) = _brightcove_create_classes($client_entity);
    $video = NULL;
    brightcove_try(function () use($cms, $video_id, &$video) {
      $video = $cms->getVideo($video_id);
    });
    if ($video) {
      brightcove_cache_set($cid, $video);
      return $video;
    }
  }
  return FALSE;
}

/**
 * Function that saves a remote image as a local file.
 *
 * @param string $url
 *   Remote image URL.
 *
 * @return string|bool
 *   Returns FALSE if image doesn't exist, cannot be saved or is not image (based on extension).
 *   Returns $file object if image already exists or was saved correctly.
 */
function brightcove_remote_image($url) {
  $parse = parse_url($url);
  $path = pathinfo($parse['path']);
  $fullpath = drupal_realpath(file_default_scheme() . '://brightcove_thumbnail');
  $final_file = $fullpath . '/' . $path['basename'];

  if (file_exists($final_file)) {
    return file_build_uri('brightcove_thumbnail/' . $path['basename']);
  }

  // Perform basic extension check.
  if (!in_array(drupal_strtolower($path['extension']), ['jpg', 'jpeg', 'png', 'gif'])) {
    return FALSE;
  }

  if (!file_prepare_directory($fullpath, FILE_CREATE_DIRECTORY|FILE_MODIFY_PERMISSIONS)) {
    return FALSE;
  }

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_HEADER, FALSE);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  // Causes a warning if PHP safe mode is on.
  @curl_setopt($ch, CURLOPT_FOLLOWLOCATION, TRUE);
  $rawdata = curl_exec($ch);
  if (($fp = @fopen($final_file, 'x'))) {
    fwrite($fp, $rawdata);
    fclose($fp);
  }

  return file_build_uri('brightcove_thumbnail/' . $path['basename']);
}

/**
 * Implements of hook_theme().
 */
function brightcove_theme() {
  return [
    'brightcove_unavailable_message' => [
      'variables' => ['message' => NULL],
    ],
  ];
}

function theme_brightcove_unavailable_message($variables) {
  return '<div class="video-unavailable">' . $variables['message'] . '</div>';
}

/**
 * Returns a default image for videos without a thumbnail or still image.
 *
 * @return string
 *   Path for the Brightcove placeholder image.
 */
function brightcove_get_default_image() {
  return drupal_get_path('module', 'brightcove') . '/images/default-image.png';
}

/**
 * Check if expose unavailability message in case the video is not available.
 *
 * @return
 *   Returns a themed message if checks are enabled.
 */
function brightcove_expose_unavailable() {
  if (variable_get('brightcove_check_for_unavailable', TRUE) &&
    ($unavailable_message = variable_get('brightcove_status_display_unavailable', 'This video is unavailable for the moment.'))) {
    return theme('brightcove_unavailable_message', ['message' => $unavailable_message]);
  }

  return '';
}

/**
 * @param $client_entity
 * @return BrightcoveClient
 * @throws BrightcoveAuthenticationException
 */
function _brightcove_create_client($client_entity) {
  brightcove_load_lib();
  $client_id = $client_entity->client_id;
  $client_secret = $client_entity->client_secret;

  return BrightcoveClient::authorize($client_id, $client_secret);
}

function _brightcove_create_classes($client_entity) {
  $client = _brightcove_create_client($client_entity);
  $account = $client_entity->account_id;
  $cms = new BrightcoveCMS($client, $account);
  $di = new BrightcoveDI($client, $account);

  return [$cms, $di];
}

/**
 * @param $client_entity
 * @param $url
 * @param $profile
 * @param $hash
 * @param null|callable $metadata_callback
 * @return BrightcoveVideo
 */
function brightcove_upload_and_ingest($client_entity, $url, $profile, $hash, callable $metadata_callback = NULL) {
  brightcove_load_lib();
  list($cms, $di) = _brightcove_create_classes($client_entity);

  $video = new BrightcoveVideo();
  if ($metadata_callback !== NULL) {
    $metadata_callback($video, $cms);
  }

  $video = $cms->createVideo($video);
  $request = BrightcoveIngestRequest::createRequest($url, $profile);
  if (($callback = _brightcove_get_ingest_callback($hash))) {
    $request->setCallbacks([$callback]);
  }
  $di->createIngest($video->getId(), $request);

  return $video;
}

function _brightcove_get_ingest_callback($hash) {
  if (!variable_get('brightcove_track_ingestion')) {
    return FALSE;
  }

  if (variable_get('brightcove_auto_callback', TRUE)) {
    return url("brightcove/callback/{$hash}", ['absolute' => TRUE]);
  }

  return rtrim(variable_get('brightcove_callback'), '/') . "/{$hash}";
}

function brightcove_handle_ingest_callback($hash) {
  $row = db_query("SELECT * FROM {brightcove_callback} WHERE id = :hash", [':hash' => $hash])->fetchAssoc();
  if (!$row) {
    drupal_not_found();
    return;
  }

  $fid = $row['fid'];
  file_delete(file_load($fid));
  db_delete('brightcove_callback')
    ->condition('id', $hash)
    ->execute();

  return NULL;
}

/**
 * Parse a field value in form of "title [id:123]" and return 123
 *
 * @param $id
 *   Video ID in form of "title [id:123]".
 * @return
 *   Int value of the ID or NULL if not found.
 */
function brightcove_parse_id($id) {
  preg_match('/\[id:([^\[]*)\]$/', $id, $matches);
  if (count($matches) == 2) {
    return $matches[1];
  }
  return NULL;
}

/**
 * Generate a reference ID based on Drupal version and User ID.
 *
 * @param $account
 *   Account UID that is responsible for this video. If NULL, logged in user is used.
 */
function brightcove_generate_reference($account = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user->uid;
  }
  return "drupal:" . DRUPAL_CORE_COMPATIBILITY . ":" . $account . ":" . md5(microtime());
}

/**
 * Load a player.
 *
 * @param $name
 * @return mixed
 */
function brightcove_player_load($name) {
  // Try to get the default player.
  if (empty($name)) {
    $default_player = variable_get('brightcove_player_default', NULL);

    // If no default player is set, show an error message.
    if (is_null($default_player)) {
      drupal_set_message(t('Default player is not set, please set one on the !link page.', ['!link' => l(t('Brightcove settings'), 'admin/config/media/brightcove/players')]), 'error');
    }

    return $default_player;
  }

  // Return the player with the given name.
  $players = brightcove_player_load_all();

  // If the currently selected player is not available (eg. it was deleted) use
  // the default player.
  if (!isset($players[$name])) {
    $name = variable_get('brightcove_player_default');
  }
  return $players[$name];
}

/**
 * Load all players.
 *
 * @return mixed
 */
function brightcove_player_load_all() {
  ctools_include('export');
  return ctools_export_crud_load_all('brightcove_player');
}

/**
 * Get players list.
 *
 * @param array $instance
 *   Entity specific instance.
 *
 * @return mixed
 */
function brightcove_player_list($instance = NULL) {
  $players = brightcove_player_load_all();

  // Get the entity specific default player.
  if (!is_null($instance) && isset($players[$instance['settings']['brightcove_player']])) {
    $default_player = $players[$instance['settings']['brightcove_player']]->display_name;
  }
  // Otherwise if not set get the globally set default player.
  else {
    $default_player = variable_get('brightcove_player_default', t('none'));
    if (isset($players[$default_player])) {
      $default_player = $players[$default_player]->display_name;
    }
  }

  $return = ['' => t('Default (@default_player)', ['@default_player' => $default_player])];
  foreach ($players as $id => $player) {
    $return[$id] = $player->display_name;
  }
  return $return;
}

/**
 * Get the default player.
 *
 * @return mixed|null
 */
function brightcove_default_player() {
  $default = variable_get('brightcove_player_default', NULL);

  if (is_null($default)) {
    drupal_set_message(t("The default brightcove player has not been defined yet."), 'warning');
    return NULL;
  }

  return brightcove_player_load($default);
}

/**
 * Save a player.
 *
 * @param $player
 * @return DatabaseStatementInterface|int|null
 */
function brightcove_player_save($player) {
  ctools_include('export');
  return ctools_export_crud_save('brightcove_player', $player);
}

/**
 * Delete a player.
 *
 * @param $player
 * @return DatabaseStatementInterface
 */
function brightcove_player_delete($player) {
  ctools_include('export');
  return ctools_export_crud_delete('brightcove_player', $player);
}

/**
 * Loads all clients which belong to a given or current user.
 *
 * @param null|stdClass $account
 * @return array
 */
function _brightcove_load_my_clients($account = NULL) {
  // Load all brightcove_client entities.
  // We need $reset = TRUE otherwise we get no clients in an AJAX call.
  $clients = entity_load('brightcove_client', FALSE, [], TRUE);

  // Keep only the clients $account has access to.
  $clients = array_filter($clients, function ($client) use ($account) {
    return brightcove_client_access('use', $client, $account);
  });

  return $clients;
}

function _brightcove_my_client_select_options($account = NULL) {
  $clients = _brightcove_load_my_clients($account);
  $clients_options = [];
  foreach ($clients as $client) {
    $clients_options[$client->bcid] = $client->label;
  }

  return $clients_options;
}

/**
 * Validate callback for _brightcove_upload_form().
 */
function _brightcove_upload_form_validate($form, &$form_state) {
  if (!in_array($form_state['values']['client'], array_keys(_brightcove_load_my_clients()))) {
    form_error($form['client'], t('Invalid client selected.'));
  }
}

function _brightcove_schedule_start_end_date_pre_render($elements) {
  // Remove descriptions from the date and time fields.
  unset($elements['date']['#description']);
  unset($elements['time']['#description']);

  return $elements;
}

/**
 * Upload the submitted video.
 *
 * @param $form
 * @param $form_state
 * @return bool|StdClass
 */
function _brightcove_upload_form_callback(&$form, $form_state) {
  $validators = [
    'file_validate_extensions' => ['3g2 3gp asf avi dv flv f4v m4v mov mp4 mpeg mpg mts m2ts qt wmv'],
  ];

  $file = file_save_upload('file_upload', $validators, file_default_scheme() . '://');

  if (!$file) {
    drupal_set_message(t('Only Video files are allowed here.'), 'error');
    return $form;
  }

  if ($file->filesize <= 0) {
    // Some uploaded files had zero size, that's an error.
    drupal_set_message(t('Uploaded file not found. Are you sure that you uploaded an existing file?'), 'error');
    return $form;
  }

  if (form_get_errors()) {
    return $form;
  }
  brightcove_load_lib();
  $video_entity = $form['#entity'];
  $video_id = FALSE;
  brightcove_try(function() use(&$video_id, $file, $form, &$form_state, $video_entity) {
    $client = $video_entity->client;
    $hash = hash('sha512', mt_rand());
    $video = brightcove_upload_and_ingest($client, file_create_url($file->uri), $form_state['values']['profile'], $hash, function ($video, $cms) use ($form_state) {
      // Generate a reference id if the user left it empty.
      $reference_id = (!empty($form_state['values']['reference_id']) ? $form_state['values']['reference_id'] : brightcove_generate_reference());

      $video
        ->setName($form_state['values']['title'])
        ->setDescription($form_state['values']['short'])
        ->setLongDescription($form_state['values']['long'])
        ->setLink((new BrightcoveVideoLink())
          ->setText($form_state['values']['linktext'])
          ->setUrl($form_state['values']['linkurl'])
        )
        ->setState($form_state['values']['state'] ? 'ACTIVE' : 'INACTIVE')
        ->setEconomics($form_state['values']['economics'])
        ->setReferenceId($reference_id);

      // Set start/end availability dates if one of them was given.
      if ($form_state['values']['start_date'] == 'date_set' || $form_state['values']['end_date'] == 'date_set') {
        $video_schedule = (new BrightcoveVideoSchedule());
        if ($form_state['values']['start_date'] == 'date_set') {
          $datetime = new DateTime($form_state['values']['start_availability_date']);
          $video_schedule->setStartsAt($datetime->format(DateTime::ISO8601));
        }

        if ($form_state['values']['end_date'] == 'date_set') {
          $datetime = new DateTime($form_state['values']['end_availability_date']);
          $video_schedule->setEndsAt($datetime->format(DateTime::ISO8601));
        }

        $video->setSchedule($video_schedule);
      }

      $fields = $cms->getVideoFields();
      $ids = array_map(function ($field) {
        return $field->getId();
      }, $fields->getCustomFields());
      $custom_fields = [];
      foreach ($ids as $id) {
        if (!empty($form_state['values']["custom_field_{$id}"])) {
          $custom_fields[$id] = $form_state['values']["custom_field_{$id}"];
        }
      }
      if ($custom_fields) {
        $video->setCustomFields($custom_fields);
      }

      if (!empty($form_state['values']['tags'])) {
        $tags = explode(',', $form_state['values']['tags']);
        $tags = array_map('trim', $tags);
        $video->setTags($tags);
      }
    });
    $video_entity->video = $video;
    // Save additional fields
    field_attach_submit('brightcove_video', $video_entity, $form['additional_fields'], $form_state);
    $video_entity->save();
    $video_id = $video->getId();
  }, NULL, 'brightcove_upload');

  return $video_id;
}

function _brightcove_edit_form_callback($form, $form_state) {
  brightcove_load_lib();
  $video_entity = $form['#entity'];
  $client = $video_entity->client;
  $video_id = $video_entity->video_id;
  if (empty($video_entity->video) || !($video_entity->video instanceof BrightcoveVideo)) {
    $video_entity->video  = brightcove_load_video($video_id, $client);
  }
  $video = $video_entity->video;

  list($cms,) = _brightcove_create_classes($client);
  $custom_field_definitions = $cms->getVideoFields()->getCustomFields();

  $video->setName($form_state['values']['title']);
  $video->setDescription($form_state['values']['short']);
  $video->setLongDescription($form_state['values']['long']);
  $video->setReferenceId($form_state['values']['reference_id']);
  $video->setTags(array_filter(array_map('trim', explode(',', $form_state['values']['tags']))));
  $video->setState($form_state['values']['state']);
  $custom_fields = [];
  foreach ($custom_field_definitions as $def) {
    $custom_fields[$def->getId()] = isset($form_state['values']["custom_field_{$def->getId()}"]) ? $form_state['values']["custom_field_{$def->getId()}"] : NULL;
  }
  $video->setCustomFields($custom_fields);
  $schedule = new BrightcoveVideoSchedule();
  $schedule_set = FALSE;
  if ($form_state['values']['start_date'] !== 'immediately') {
    $datetime = new DateTime($form_state['values']['start_availability_date']);
    $schedule->setStartsAt($datetime->format(DateTime::ISO8601));
    $schedule_set = TRUE;
  }
  if ($form_state['values']['end_date'] !== 'no_end_date') {
    $datetime = new DateTime($form_state['values']['end_availability_date']);
    $schedule->setEndsAt($datetime->format(DateTime::ISO8601));
    $schedule_set = TRUE;
  }
  if ($schedule_set) {
    $video->setSchedule($schedule);
  }
  $link = new BrightcoveVideoLink();
  $link->setText($form_state['values']['linktext']);
  $link->setUrl($form_state['values']['linkurl']);
  $video->setLink($link);
  $video->setEconomics($form_state['values']['economics']);

  field_attach_submit('brightcove_video', $video_entity, $form['additional_fields'], $form_state);
  $video_entity->save();
  return $video_id;
}

/**
 * Return the cached data based on the type of the caching.
 *
 * @param $cid
 *   The id of the cache.
 *
 * @return mixed
 *   The cached data, if exists, FALSE otherwise.
 */
function brightcove_cache_get($cid) {
  // If cache is enabled.
  if (variable_get('brightcove_cache_enabled', TRUE)) {
    $cache = cache_get($cid, 'cache_brightcove');
    if ($cache) {
      return $cache->data;
    }
  }
  return FALSE;
}

/**
 * Cache Brightcove data according to the type of caching being set.
 *
 * @param $cid
 *   The id of the cache.
 * @param $data
 *   The data going to be cached
 * .
 * @return mixed
 *   The cached data, if exists, NULL otherwise.
 */
function brightcove_cache_set($cid, $data) {
  // If cache is enabled.
  if (variable_get('brightcove_cache_enabled', TRUE)) {
    $cache_settings = variable_get('brightcove_cache_db', []);
    $cache_time = isset($cache_settings['cache_time']) ? $cache_settings['cache_time'] : 600;
    // Save data to cache table.
    cache_set($cid, $data, 'cache_brightcove', time() + $cache_time);
  }
}

/**
 * Implements hook_flush_caches().
 */
function brightcove_flush_caches() {
  // If a user updates the module from an older version which is not include the cache table,
  // the update method will be broken, because the system will try to flush the cache from the
  // unexisting table as well.
  $tables = db_table_exists('cache_brightcove') ? ['cache_brightcove'] : [];
  return $tables;
}

/**
 * Invalidate outdated cache records.
 *
 * @param $cid
 * @param bool $wildcard
 */
function brightcove_invalidate_cache($cid, $wildcard = FALSE) {
  // If cache is enabled.
  if (variable_get('brightcove_cache_enabled', TRUE)) {
    // Get the type of cache being set.
    $type = variable_get('brightcove_cache_type', 'db');
    switch ($type) {
      case 'db':
        cache_clear_all($cid, 'cache_brightcove', $wildcard);
        break;
      case 'file':
        if ($wildcard) {
          // Remove all the cache files, when new file is added or an existing one is deleted, because we can't use
          // wildcard like we can when we cache to database.
          _brightcove_delete_cache_files();
        }
        else {
          _brightcove_delete_cache_files($cid);
        }
        break;
      case 'memcached':
        if ($wildcard) {
          // Remove all the cache files, when new file is added or an existing one is deleted, because we can't use
          // wildcard like we can when we cache to database.
          _brightcove_delete_memcached();
        }
        else {
          _brightcove_delete_memcached($cid);
        }
        break;
    }
  }
}

/**
 * Helper function to be able to delete unnecessary cache files.
 *
 * @param null $cid
 */
function _brightcove_delete_cache_files($cid = NULL) {
  $cache_settings = variable_get('brightcove_cache_file', []);
  $path = isset($cache_settings['path']) ? _brightcove_cache_fix_file_path($cache_settings['path']) : BRIGHTCOVE_CACHE_FILE_PATH;

  if ($cid) {
    $ext = isset($cache_settings['ext']) ? $cache_settings['ext'] : BRIGHTCOVE_CACHE_FILE_EXT;
    // Delete affected cache file.
    $file = $path . md5($cid) . '.' . $ext;
    unlink($file);
  }
  else {
    // If no cache id given, the module deletes all the cache files from the cache folder.
    $files = glob($path . '*');
    foreach ($files as $file) {
      if (is_file($file)) {
        unlink($file);
      }
    }
  }
}

/**
 * Helper function to be able to delete outdated memcached items.
 *
 * @param $cid
 */
function _brightcove_delete_memcached($cid = NULL) {
  $cache_settings = variable_get('brightcove_cache_memcached', []);
  $location = isset($cache_settings['path']) ? $cache_settings['path'] : BRIGHTCOVE_CACHE_MEMCACHE_PATH;
  $port = isset($cache_settings['port']) ? $cache_settings['port'] : BRIGHTCOVE_CACHE_MEMCACHE_PORT;

  $memcached = new Memcached();
  $memcached->addServer($location, $port);

  if ($cid) {
    $memcached->delete($cid);
  }
  else {
    // Remove all cache item.
    $memcached->flush();
  }

}

/**
 * Returns the appropriate external URL to the BrightcoveExperiences.js file.
 *
 * @return string
 *  The appropriate external js URL.
 *
 * @see http://support.brightcove.com/en/video-cloud/docs/publishing-video-cloud-player-https-page
 */
function brightcove_get_experiences_js_url() {
  global $is_https;

  // Set the filename we want to load.
  $filename = 'BrightcoveExperiences.js';
  if (variable_get('brightcove_player_full_api', FALSE)) {
    $filename = 'BrightcoveExperiences_all.js';
  }

  // Set the appropriate protocol.
  $path = 'http://admin.brightcove.com/js/' . $filename;
  if ($is_https) {
    $path = 'https://sadmin.brightcove.com/js/' . $filename;
  }

  return $path;
}

/**
 * Returns the appropriate URL to the Brightcove viewer.
 *
 * The calling function should append appropriate query strings to this URL to
 * control the video and player.
 *
 * @return string
 *  Brightcove viewer path.
 *
 * @todo Find out how to detect this URL in a nice way;
 */
function brightcove_get_viewer_url() {
  global $is_https;

  $path = 'http://c.brightcove.com/services/viewer/federated_f9';
  if ($is_https) {
    $path = 'https://secure.brightcove.com/services/viewer/federated_f9';
  }

  return $path;
}

/**
 * Helper function to be able to add the closing "/" character, if it doesn't exist.
 *
 * @param $location
 * @return string
 */
function _brightcove_cache_fix_file_path($location) {
  return (substr($location, -1) === '/') ? $location : $location . '/';
}

function brightcove_standard_profile_list() {
  static $list = [
    'Express Standard',
    'Live - HD',
    'Live - Premium HD',
    'Live - Standard',
    'audio-only',
    'balanced-high-definition',
    'balanced-nextgen-player',
    'balanced-standard-definition',
    'high-bandwidth-devices',
    'low-bandwidth-devices',
    'mp4-only',
    'screencast',
    'single-rendition',
  ];

  return $list;
}

/**
 * Implements hook_exit().
 */
function brightcove_exit($destination = NULL) {
  // Redirect to the given path.
  if (isset($_SESSION['player_delete_redirect'])) {
    $goto = $_SESSION['player_delete_redirect'];
    unset($_SESSION['player_delete_redirect']);
    drupal_goto($goto);
  }
}

function brightcove_try(callable $try, callable $catch = NULL, $logtype = NULL) {
  try {
    $try();
  } catch (BrightcoveAPIException $ex) {
    drupal_set_message(t('Brightcove API call failed: %message', [
      '%message' => _brightcove_try_json_message($ex->getResponseBody()),
    ]));
    watchdog_exception($logtype ?: 'brightcove_api', $ex);
    if ($catch) {
      $catch($ex);
    }
  } catch (BrightcoveAuthenticationException $ex) {
    drupal_set_message(t('Failed to authorize with Brightcove'));
    watchdog_exception($logtype ?: 'brightcove_auth', $ex);
    if ($catch) {
      $catch($ex);
    }
  }
}

function _brightcove_try_json_message($post) {
  $postjson = json_decode($post, TRUE);
  if ($postjson === NULL || !is_array($postjson) || empty($postjson['message'])) {
    return $post;
  }

  return $postjson['message'];
}
