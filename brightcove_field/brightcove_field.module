<?php

/**
 * @file
 * Brightcove field module provides a Content Construction Kit module to
 * developers, allowing them to browse videos in their Brightcove Studio and
 * upload them.
 *
 * @author
 * Jakub Suchy <jakub@dynamiteheads.com>, Andrew Burcin <andrew@dynamiteheads.com>
 *
 * Module development sponsored by Brightcove, Inc.
 */

/**
 * Implementation of hook_menu().
 */
function brightcove_field_menu() {
  $items = array();
  $items['brightcove_field/autocomplete/%/%/%'] = array(
      'title' => 'Brightcove field autocomplete',
      'page callback' => 'brightcove_field_autocomplete',
      'page arguments' => array(2),
      'access callback' => 'brightcove_field_browse_access',
      'access arguments' => array(3, '', 2),
      'file' => 'brightcove_field.browse.inc',
      'type' => MENU_CALLBACK,
      );
  $items['brightcove_field/browse/%/%/%'] = array(
      'title' => 'Brightcove Videos Browser',
      'page arguments' => array(2, 3, 4),
      'page callback' => 'brightcove_field_browse',
      'access callback' => 'brightcove_field_browse_access',
      'access arguments' => array(2, 3, 4),
      'file' => 'brightcove_field.browse.inc',
      'type' => MENU_CALLBACK,
      );
  $items['brightcove_field/upload/%/%/%'] = array(
      'title' => 'Upload video to Brightcove',
      'page arguments' => array(2, 3, 4),
      'page callback' => 'brightcove_field_upload',
      'access callback' => 'brightcove_field_browse_access',
      'access arguments' => array(2, 3, 4),
      'file' => 'brightcove_field.browse.inc',
      'type' => MENU_CALLBACK,
      );

  $items['brightcove_field_player/%/%/%/%'] = array(
      'title' => 'Brightcove Videos Window Player',
      'page callback' => 'brightcove_field_player',
      'page arguments' => array(1, 2, 3, 4),
      'access callback' => 'entity_access',
      'access arguments' => array('view', 1, 2),
      'type' => MENU_CALLBACK,
      );

  return $items;
}

/**
 * Access callback for brightcove browser.
 *
 * @param $node_type
 * Node type.
 * @param $field_name
 * Field name.
 * @param arg(4)
 * Optional node which is edited.
 *
 * @return
 * TRUE if access is allowed, FALSE if access is forbidden.
 */
function brightcove_field_browse_access($entity_type, $bundle,
  $field_name, $entity_id = NULL) {

  $field = field_info_field($field_name);

  if (isset($entity_id)) {
    $entity = entity_load($entity_type, array($entity_id));
    if (count($entity)) {
      $entity = array_shift($entity);
    }
    return (entity_access('update', $entity_type, $entity) &&
        field_access('edit', $field, $entity_type));
  }
  else if (!empty($bundle)) {
    return (entity_access('create', $entity_type, $bundle) &&
            field_access('edit', $field, $entity_type));
  }
  else {
    return entity_access('create', $entity_type) &&
           field_access('edit', $field, $entity_type);
  }
}

/**
 * Callback for brightcove_field_player - checks access to the field and prints a player for Lightbox2.
 *
 * @param $node
 * Node object.
 * @param $field_name
 * Field that is being displayed.
 * @param $delta
 * Field delta.
 *
 * @return none
 */
function brightcove_field_player($entity_type, $entity_id, $field_name, $delta) {
  $entities = entity_load($entity_type, array($entity_id));
  $entity = array_shift($entities);
  if (entity_access('view', $entity_type, $entity) &&
      field_access('view', field_info_field($field_name),
                   $entity_type, $entity)) {
    $field = $entity->{$field_name}[isset($entity->language) ?
      $entity->language : 'und'][$delta]['video_id'];
    $output = '<script src="http://admin.brightcove.com/js/BrightcoveExperiences.js" type="text/javascript"></script>';
    brightcove_initialize();
    $output .= theme('brightcove_field_embed', 'video', variable_get('brightcove_player', ''), variable_get('brightcove_player_key', ''), $field, array());

    print $output;
  }
}


/**
 * Implementation of hook_field_info().
 */
function brightcove_field_field_info() {
  return array(
   'brightcove_video' => array(
     'label' => t('Brightcove Video'),
     'description' => t('Browse and upload videos at Brightcove.'),
     'settings' => array(),
     'instance_settings' => array(
       'allow_upload' => FALSE,
     ),
     'default_widget' => array(),
     'default_formatter' => array(),
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function brightcove_field_field_settings_form($field, $instance, $has_data) {
  $form = array();

  // Only allow Upload if this site has Write API keys.
  if (brightcove_write_api_access()) {
    $form['allow_upload'] = array(
      '#type' => 'checkbox',
      '#title' => t('Allow upload'),
      '#description' => t('Whether to allow uploading new videos to ' .
                          'Brightcove Studio from this field. ' .
                          'Requires Write API keys with at least a ' .
                          '!link-to-editions-and-pricing',
                          array(
                            '!link-to-editions-and-pricing' => l(
                              t('Professional account'),
              'http://www.brightcove.com/en/video-platform/editions-and-pricing'
                            ),
                          )),
      '#default_value' => $instance['settings']['allow_upload'],
    );
  }
  else {
    $form['allow_upload'] = array(
      '#type' => 'value',
      '#value' => $instance['settings']['allow_upload'],
    );
  }
  return $form;
}

/**
 * Implements hook_field_validate().
 */
function brightcove_field_field_validate($entity_type, $entity,
                                         $field, $instance,
                                         $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['video_id'])) {
    $video = brightcove_video_load($item['video_id']);
      if (empty($video->id)) {
        if (brightcove_video_cache_get($item['video_id']) === NULL) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'brightcove_field',
            'message' => t('%name: invalid video.', array(
              '%name' => t($field['widget']['label'])
            )),
          );
        }
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function brightcove_field_field_is_empty($item, $field) {
  return empty($item['video_id']);
}

/**
 * Validate callback for the field.
 */
function brightcove_field_browser_validate($element, &$form_state) {
  $id = '';
  $field_name = $element['#field_name'];
  $field = field_info_field($field_name);
  $value = $element['#value'];
  if (!empty($value)) {
    // Assign ID to the value.
    // 231289 [id:72431493001]
    $id = brightcove_parse_id($value);

    if (is_numeric($id)) {
      // Matched ID, check if the video exists.
      $video = brightcove_video_load($id);
      if (is_null(brightcove_video_cache_get($id)) && $video->id != $id) {
        form_error($element, t('%name: Found no valid video with that name. Please note that it might take several minutes after the video has been uploaded in Brightcove Studio to appear in the API.', array('%name' => t($field['widget']['label']))));
      }
    } else {
      // Didn't match ID, try looking up the video text at BC.
      $bc = brightcove_initialize();
      $result = NULL;
      try {
        $result = $bc ? $bc->find('find_videos_by_text',
                                array('text' => $value)) : array();
      } catch (Exception $error) {
        form_error($element, t('There was a problem accessing Brightcove. Please try again'));
        watchdog('brightcove', 'Validating element with Brightcove failed', array(), WATCHDOG_ERROR);
      }
      if (count($result) > 1) {
        // This title is ambiguous.
        form_error($element, t('%name: Video title %title matched more than one video. In case of doubt, use text "title [id:ID_OF_THE_VIDEO]"', array('%title', $value, '%name' => t($field['widget']['label']))));
      } else if (count($result) == 0) {
        // No video found.
        form_error($element, t('%name: Found no valid video with that name. Please note that it might take several minutes after the video has been uploaded in Brightcove Studio to appear in the API.', array('%name' => t($field['widget']['label']))));
      } else {
        $id = $result[0]->id;
      }
    }
  }
  form_set_value($element, $id, $form_state);
}

/**
 * Implementation of hook_formatter_info().
 */
function brightcove_field_field_formatter_info() {
  $formatters = array(
      'default' => array(
        'label' => t('Standard video player'),
        'field types' => array('brightcove_video'),
        ),
      );
  $formatters['node_link_videoStillURL'] = array(
      'label' => t('Default still image linked to node'),
      'field types' => array('brightcove_video'),
      );
  $formatters['node_link_thumbnailURL'] = array(
      'label' => t('Default thumbnail linked to node'),
      'field types' => array('brightcove_video'),
      );
  $formatters['node_image_videoStillURL'] = array(
      'label' => t('Default still image'),
      'field types' => array('brightcove_video'),
      );
  $formatters['node_image_thumbnailURL'] = array(
      'label' => t('Default thumbnail'),
      'field types' => array('brightcove_video'),
      );

//  if (module_exists('lightbox2')) {
//    $formatters['lightbox2_player_videoStillURL'] = array(
//        'label' => t('Default still image -> Lightbox2 player'),
//        'field types' => array('brightcove_video'),
//        'multiple values' => CONTENT_HANDLE_CORE,
//        );
//
//    $formatters['lightbox2_player_thumbnailURL'] = array(
//        'label' => t('Default thumbnail -> Lightbox2 player'),
//        'field types' => array('brightcove_video'),
//        'multiple values' => CONTENT_HANDLE_CORE,
//        );
//  }
//  if (module_exists('imagecache')) {
//    $presets = imagecache_presets();
//    foreach($presets as $preset_id => $preset) {
//      if (module_exists('lightbox2')) {
//        $formatters['lightbox2_imagecache_' . $preset['presetname'] . '__thumbnailURL'] = array(
//            'label' => t('Imagecache @preset thumbnail -> Lightbox2 player', array('@preset' => $preset['presetname'])),
//            'field types' => array('brightcove_video'),
//            'multiple values' => CONTENT_HANDLE_CORE,
//            );
//        $formatters['lightbox2_imagecache_' . $preset['presetname'] . '__videoStillURL'] = array(
//            'label' => t('Imagecache @preset still image -> Lightbox2 player', array('@preset' => $preset['presetname'])),
//            'field types' => array('brightcove_video'),
//            'multiple values' => CONTENT_HANDLE_CORE,
//            );
//      }
//      $formatters['node_link_imagecache_' . $preset['presetname'] . '__videoStillURL'] = array(
//          'label' => t('Imagecache @preset still image linked to node', array('@preset' => $preset['presetname'])),
//          'field types' => array('brightcove_video'),
//          'multiple values' => CONTENT_HANDLE_CORE,
//          );
//      $formatters['node_link_imagecache_' . $preset['presetname'] . '__thumbnailURL'] = array(
//          'label' => t('Imagecache @preset thumbnail linked to node', array('@preset' => $preset['presetname'])),
//          'field types' => array('brightcove_video'),
//          'multiple values' => CONTENT_HANDLE_CORE,
//          );
//      $formatters['node_image_imagecache_' . $preset['presetname'] . '__videoStillURL'] = array(
//          'label' => t('Imagecache @preset still image', array('@preset' => $preset['presetname'])),
//          'field types' => array('brightcove_video'),
//          'multiple values' => CONTENT_HANDLE_CORE,
//          );
//      $formatters['node_image_imagecache_' . $preset['presetname'] . '__thumbnailURL'] = array(
//          'label' => t('Imagecache @preset thumbnail', array('@preset' => $preset['presetname'])),
//          'field types' => array('brightcove_video'),
//          'multiple values' => CONTENT_HANDLE_CORE,
//          );
//
//    }
//  }
  return $formatters;
}


/**
 * Implementation of hook_widget_info().
 */
function brightcove_field_field_widget_info() {
  return array(
    'brightcove_field_browser' => array(
      'label' => t('Video browser & upload'),
      'field types' => array('brightcove_video'),
      'behaviors' => array(
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_element_info().
 */
function brightcove_field_element_info() {
  $elements = array(
    'brightcove_field_browser' => array(
      '#input' => TRUE,
      '#columns' => array('video_id'),
      '#delta' => 0,
      '#process' => array('brightcove_field_browser_process'),
      '#autocomplete_path' => FALSE,
    ),
    'brightcove_field_browse_button' => array(
      '#input' => FALSE,
    ),
  );
  return $elements;
}

/**
 * Brightcove field form that returns the actual field to the user.
 * Parts of this and subsequent JS taken from Nodereference Explorer. Thanks!
 */
function brightcove_field_browser_process($element, $form_state, $form) {
  $field_key  = $element['#columns'][0];

  $entity_type = $form['#entity_type'];
  $entity_info = entity_get_info($entity_type);
  $eid = $form[$entity_info['entity keys']['id']]['#value'];

  //$field_info = content_fields($element['#field_name'],
  //                              $element['#type_name']);
  //modalframe_parent_js(); //dialog internal area
  $field_info = field_info_field($element['#field_name']);
  $element[$field_key] = array(
    '#type' => 'textfield',
    '#default_value' => isset($element['#value'][$field_key]) ?
      $element['#value'][$field_key] : '',
    '#autocomplete_path' => 'brightcove_field/autocomplete/'.
                            $element['#field_name'] . '/' .
                            $element['#entity_type']. '/' . $eid,
    // The following values were set by the content module and need
    // to be passed down to the nested element.
    '#title' => $element['#title'],
    '#required' => $element['#required'],
    '#description' => $element['#description'],
    '#field_name' => $element['#field_name'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
    '#attributes' => array(
      'rel' => $element['#field_name'],
      'class' => array('brightcove-video-field'),
    ),
  );

  if (user_access('browse videos')) {
    // Button to browse videos.
    $element['actions']['browse'] = array(
      '#type' => 'brightcove_field_browse_button',
      '#id' => $element['#id'] . '-browse',
      '#attributes' => array(
        'class' => array('brightcove-field-browse-button'),
        'rel' => $element['#id'] . '-video-id'
      ),
      '#value' => t('Browse'),
    );
  }

  if ((user_access('upload videos')) &&
      ($field_info['settings']['allow_upload'])) {
    $element['actions']['upload'] = array(
      '#type' => 'brightcove_field_browse_button',
      '#id' => $element['#id'] . '-upload',
      '#attributes' => array(
        'class' => array('brightcove-field-upload-button'),
        'rel' => $element['#id'] . '-video-id'
      ),
      '#value' => t('Upload'),
    );
  }

  $element['actions']['remove'] = array(
    '#type' => 'brightcove_field_browse_button',
    '#id' => $element['#id'] . '-remove',
    '#attributes' => array(
      'class' => array('brightcove-field-remove-button'),
      'rel' => $element['#id'] . '-video-id'
    ),
    '#value' => t('Remove'),
  );

  if (!isset($element['#default_value'][$field_key])) {
    $element['actions']['remove']['#attributes']['disabled'] = 'disabled';
  }


  if (empty($brightcove_field_settings[$element['#field_name']])) {
    $brightcove_field_settings[$element['#field_name']] = array(
        'brightcove_field' => array($element['#field_name'] => array(
            'entity_type' => $entity_type,
            'field_name' => $element['#field_name'],
            'entity_id' => $eid,
            )),
        );
    drupal_add_js($brightcove_field_settings[$element['#field_name']],
                  array('type' => 'setting'));
  }


  if (empty($element[$field_key]['#element_validate'])) {
    $element[$field_key]['#element_validate'] = array();
  }
  array_unshift($element[$field_key]['#element_validate'], 'brightcove_field_browser_validate');

  return $element;

}

/**
 * Value callback for the buttons.
 *
 * @return null
 */
function brightcove_field_button_value_callback() {
  return NULL;
}

/**
 * Implements hook_field_widget_form().
 */
function brightcove_field_field_widget_form(&$form, &$form_state,
                                            $field, $instance,
                                            $langcode, $items, $delta,
                                            $element) {
  $entity_type = $element['#entity_type'];
  $entity_info = entity_get_info($entity_type);
  $eid = isset($form[$entity_info['entity keys']['id']]['#value']) ?
    $form[$entity_info['entity keys']['id']]['#value'] : NULL;
  $element['video_id'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]['video_id']) ?
      $items[$delta]['video_id'] : NULL,
    '#value_callback' => 'brightcove_field_browser_value',
    '#autocomplete_path' => 'brightcove_field/autocomplete/'.
                            $element['#field_name'] . '/' .
                            $element['#entity_type']. '/' . ($eid ? $eid : 0),
    '#attributes' => array(
      'rel' => $element['#field_name'],
      'class' => array('brightcove-video-field', $element['#field_name'] . '-' . $delta),
    ),
    '#element_validate' => array(
      'brightcove_field_browser_validate',
    ),
    '#field_name' => $element['#field_name'],
  );

  if (user_access('browse videos')) {
    // Button to browse videos.
    $element['actions']['browse'] = array(
      '#type' => 'button',
      '#attributes' => array(
        'class' => array('brightcove-field-browse-button'),
        'rel' => array($element['#field_name'] . '-' . $delta),
      ),
      '#value' => t('Browse'),
      '#value_callback' => 'brightcove_field_button_value_callback',
    );
  }

  if ((user_access('upload videos')) &&
      ($field['settings']['allow_upload'])) {
    $element['actions']['upload'] = array(
      '#type' => 'button',
      '#attributes' => array(
        'class' => array('brightcove-field-upload-button'),
        'rel' => array($element['#field_name'] . '-' . $delta),
      ),
      '#value' => t('Upload'),
      '#value_callback' => 'brightcove_field_button_value_callback',
    );
  }

  $element['actions']['remove'] = array(
    '#type' => 'button',
    '#attributes' => array(
      'class' => array('brightcove-field-remove-button'),
      'rel' => array($element['#field_name'] . '-' . $delta),
    ),
    '#value' => t('Remove'),
    '#value_callback' => 'brightcove_field_button_value_callback',
  );

  if (!isset($element['#default_value'])) {
    $element['actions']['remove']['#attributes']['disabled'] = 'disabled';
  }

  return $element;
}

/**
 * Callback for Brightcove field browser widget.
 * Will return a field value in "video-name [id:videoId]" format.
 *
 */
function brightcove_field_browser_value($element, $value, $form_state) {
  if (!$value) {
    $value = $element['#default_value'];
  }
  if (((int) $value) > 1) {
    $video = brightcove_video_load($value);
    if (!empty($video->id)) {
      $value = check_plain($video->name) . " [id:{$video->id}]";
    }
    else if (!is_null(brightcove_video_cache_get($value))) {
      $value = check_plain(brightcove_video_cache_get($value)->name) .
        " [id:{$value}]";
    }

  }
  return $value;
}

/**
 * Theme function returning a video field.
 */
function theme_brightcove_field_browser($element) {
  return $element['#children'];
}

/**
 * Implementation of hook_theme().
 */
function brightcove_field_theme() {
  $theme = array(
      'brightcove_field_browser' => array(
        'variables' => array('element' => NULL),
        ),
      'brightcove_field_formatter_default' => array(
        'variables' => array('element' => NULL),
        'file' => 'brightcove_field.formatters.inc',
        ),
      'brightcove_field_player' => array(
        'variables' => array('player' => NULL, 'video_id' => NULL),
        'template' => 'brightcove-field-player',
        'pattern' => 'brightcove-field-player',
        ),
      'brightcove_field_lightbox2' => array(
        'variables' => array('output' => NULL, 'video_id' => NULL, 'video_width' => NULL, 'video_height' => NULL, 'lightbox2_width' => NULL, 'lightbox2_height' => NULL, 'destination' => NULL, 'image_field' => NULL, 'field_name' => NULL, 'type_name' => NULL, 'preset' => NULL),
        'template' => 'brightcove-field-lightbox2',
        'pattern' => 'brightcove_field_lightbox2__',
        'preprocess functions' => array('template_preprocess_brightcove_field_lightbox2'),
        ),
      'brightcove_field_node_link' => array(
        'variables' => array('output' => NULL, 'video_id' => NULL, 'destination' => NULL, 'image_field' => NULL, 'field_name' => NULL, 'type_name' => NULL, 'preset' => NULL),
        'template' => 'brightcove-field-node-link',
        'pattern' => 'brightcove_field_node_link__',
        'preprocess functions' => array('template_preprocess_brightcove_field_node_link'),
        ),
      'brightcove_field_node_image' => array(
        'variables' => array('output' => NULL, 'video_id' => NULL, 'nid' => NULL, 'image_field' => NULL, 'field_name' => NULL, 'type_name' => NULL),
        'template' => 'brightcove-field-node-image',
        'pattern' => 'brightcove_field_node_image__',
        'preprocess functions' => array('template_preprocess_brightcove_field_node_image'),
        ),
      'brightcove_field_lightbox2_imagecache' => array(
          'variables' => array('output' => NULL, 'video_id' => NULL, 'video_width' => NULL, 'video_height' => NULL, 'lightbox2_width' => NULL, 'lightbox2_height' => NULL, 'destination' => NULL, 'image_field' => NULL, 'field_name' => NULL, 'type_name' => NULL),
          'template' => 'brightcove-field-lightbox2-imagecache',
          'pattern' => 'brightcove_field_lightbox2_imagecache__',
          'preprocess functions' => array('template_preprocess_brightcove_field_lightbox2_imagecache'),
          ),
      'brightcove_field_browse_button' => array(
          'variables' => array('element' => NULL),
          'function' => 'theme_brightcove_field_browse_button',
          'file' => 'theme.inc',
          ),
      'brightcove_field_browse_item' => array(
          'variables' => array('item' => NULL),
          'file' => 'theme.inc',
          ),
      'brightcove_field_browse_items' => array(
          'variables' => array('item' => NULL),
          'file' => 'theme.inc',
          ),
      'brightcove_field_embed' => array(
          'variables' => array('type' => NULL, 'player' => NULL, 'player_key' => NULL, 'video_id' => NULL, 'params' => NULL),
          'function' => 'theme_brightcove_field_embed',
          'file' => 'theme.inc',
          ),
      );
  $theme['brightcove_field_formatter_node_link_thumbnailURL'] = array(
      'variables' => array('element' => NULL, 'image' => NULL, 'preset' => NULL),
      'function' => 'theme_brightcove_field_node_link',
      'file' => 'brightcove_field.formatters.inc',
      );
  $theme['brightcove_field_formatter_node_link_videoStillURL'] = array(
      'variables' => array('element' => NULL, 'image' => NULL, 'preset' => NULL),
      'function' => 'theme_brightcove_field_node_link',
      'file' => 'brightcove_field.formatters.inc',
      );
  $theme['brightcove_field_formatter_node_image_thumbnailURL'] = array(
      'variables' => array('element' => NULL, 'image' => NULL, 'preset' => NULL),
      'function' => 'theme_brightcove_field_node_image',
      'file' => 'brightcove_field.formatters.inc',
      );
  $theme['brightcove_field_formatter_node_image_videoStillURL'] = array(
      'variables' => array('element' => NULL, 'image' => NULL, 'preset' => NULL),
      'function' => 'theme_brightcove_field_node_image',
      'file' => 'brightcove_field.formatters.inc',
      );

  if (module_exists('lightbox2')) {
    $theme['brightcove_field_formatter_lightbox2_player_thumbnailURL'] = array(
        'variables' => array('element' => NULL, 'image' => NULL, 'preset' => NULL),
        'function' => 'theme_brightcove_field_lightbox2_player',
        'file' => 'brightcove_field.formatters.inc',
        );
    $theme['brightcove_field_formatter_lightbox2_player_videoStillURL'] = array(
        'variables' => array('element' => NULL, 'image' => NULL, 'preset' => NULL),
        'function' => 'theme_brightcove_field_lightbox2_player',
        'file' => 'brightcove_field.formatters.inc',
        );
  }
//  if (module_exists('image')) {
//    $presets = imagecache_presets();
//    foreach($presets as $preset_id => $preset) {
//      if (module_exists('lightbox2')) {
//        $theme['brightcove_field_formatter_lightbox2_imagecache_' . $preset['presetname'] . '__thumbnailURL'] = array(
//            'variables' => array('element'),
//            'function' => 'theme_brightcove_field_lightbox2_imagecache',
//            'file' => 'brightcove_field.formatters.inc',
//            );
//        $theme['brightcove_field_formatter_lightbox2_imagecache_' . $preset['presetname'] . '__videoStillURL'] = array(
//            'variables' => array('element'),
//            'function' => 'theme_brightcove_field_lightbox2_imagecache',
//            'file' => 'brightcove_field.formatters.inc',
//            );
//      }
//      $theme['brightcove_field_formatter_node_link_imagecache_' . $preset['presetname'] . '__thumbnailURL'] = array(
//          'variables' => array('element'),
//          'function' => 'theme_brightcove_field_node_link_imagecache',
//          'file' => 'brightcove_field.formatters.inc',
//          );
//      $theme['brightcove_field_formatter_node_link_imagecache_' . $preset['presetname'] . '__videoStillURL'] = array(
//          'variables' => array('element'),
//          'function' => 'theme_brightcove_field_node_link_imagecache',
//          'file' => 'brightcove_field.formatters.inc',
//          );
//      $theme['brightcove_field_formatter_node_image_imagecache_' . $preset['presetname'] . '__thumbnailURL'] = array(
//          'variables' => array('element'),
//          'function' => 'theme_brightcove_field_node_image_imagecache',
//          'file' => 'brightcove_field.formatters.inc',
//          );
//      $theme['brightcove_field_formatter_node_image_imagecache_' . $preset['presetname'] . '__videoStillURL'] = array(
//          'variables' => array('element'),
//          'function' => 'theme_brightcove_field_node_image_imagecache',
//          'file' => 'brightcove_field.formatters.inc',
//          );
//
//    }
//  }
  return $theme;
}

/**
 * Filter form for video browser.
 */
function brightcove_field_filter_form(&$form_state) {
  $form['search'] = array(
      '#type' => 'fieldset',
      '#title' => t('Filter videos'),
      '#collapsible' => TRUE,
      '#collapsed' => empty($_SESSION['brightcove_field_filter']) ? TRUE : FALSE,
      );
  $keywords = '';
  if (!empty($_SESSION['brightcove_field_filter']['keywords'])) {
    $keywords = $_SESSION['brightcove_field_filter']['keywords'];
  }
  $form['search']['keywords'] = array(
      '#type' => 'textfield',
      '#title' => t('Keywords'),
      '#size' => 25,
      '#default_value' => $keywords,
      '#description' => t('Comma separated keywords to search for.'),
      );

  $form['search']['search'] = array(
    '#type' => 'radios',
    '#title' => t('Search in'),
    '#options' => array('name' => t('Names and descriptions'), 'tags' => t('Tags: at least one of these'), 'and_tags' => t('Tags: all of these')),
    '#default_value' => isset($_SESSION['brightcove_field_filter']['search']) ? $_SESSION['brightcove_field_filter']['search'] : 'name',
    '#attributes' => array(
      'class' => array('search-radio'),
    ),
    '#description' => t('"Names and descriptions" searches in Video name, short and long descriptions. Tags searches in Video associated tags.'),
  );

  $form['search']['submit'] = array(
      '#type' => 'submit',
      '#name' => 'submit',
      '#value' => t('Filter'),
      );
  $form['search']['reset'] = array(
      '#type' => 'submit',
      '#name' => 'reset',
      '#value' => t('Reset'),
      );

  return $form;
}

/**
 * Submit callback for brightcove_field_filter_form().
 *
 * Set session variables based on selection.
 *
 * @see brightcove_field_browse().
 */
function brightcove_field_filter_form_submit($form, &$form_state) {

  $keywords = $form_state['values']['keywords'];
  $search = $form_state['values']['search'];

  // Reset the form if keywords are empty or reset button was clicked.
  if ((empty($keywords)) || $form_state['clicked_button']['#name'] == 'reset') {
    unset($_SESSION['brightcove_field_filter']);
    return;
  }

  // The only thing we do is set session variables based on the selection.
  // Browse callback will take care of the rest.
  $_SESSION['brightcove_field_filter']['keywords'] = $keywords;
  $_SESSION['brightcove_field_filter']['search'] = $search;
}

/**
 * Browse form. Will return a form for one video item.
 *
 * @see brightcove_field_forms().
 */
function brightcove_field_browser_form(&$form_state, $item) {
  $form['id'] = array(
      '#type' => 'value',
      '#value' => $item['video_id'],
      );
  $form['title'] = array(
      '#type' => 'value',
      '#value' => $item['title'],
      );
  $form['text_title'] = array(
      '#type' => 'item',
      '#value' => $item['title'],
      );
  $form['text_image'] = array(
      '#type' => 'item',
      '#value' => $item['thumbnail'],
      );
  $form['submit'] = array(
      '#type' => 'submit',
      '#name' => 'submit-' . $item['video_id'],
      '#value' => t('Attach'),
      );
  $form['#submit'] = array("brightcove_field_browser_form_submit");
  return $form;
}

/**
 * Submit callback for brightcove_field_browser_form().
 *
 * Just take the value and pass it to modalframe.
 */
function brightcove_field_browser_form_submit($form, &$form_state) {
  // The value is "title [id:ID]" - recognised by validating element.
  $return['selected'] = $form_state['values']['title'] . ' [id:' . $form_state['values']['id'] . ']';
  //modalframe_close_dialog($return);
}

/**
 * Implementation of hook_forms().
 *
 * Needed to help Drupal determine which form to render - every video item in
 * the browser is a separate form.
 */
function brightcove_field_forms($form_id, $args) {
  $forms = array();
  if (strpos($form_id, "brightcove_field_browser_form") === 0) {
    $forms[$form_id] = array('callback' => 'brightcove_field_browser_form');
  }
  return $forms;
}



/**
 * Implementation of hook_views_api().
 */
function brightcove_field_views_api() {
  return array(
      'api' => 3,
      'path' => drupal_get_path('module', 'brightcove_field') .'/views',
      );
}

/**
 * Browse form. Will return a form for one video item.
 */
function brightcove_field_upload_form(&$form_state) {

  drupal_add_js(drupal_get_path('module', 'brightcove_field') . '/js/upload.js');
  drupal_add_css(drupal_get_path('module', 'brightcove_field') . '/styles/upload.css');
  $form['title'] = array(
      '#type' => 'textfield',
      '#title' => t('Title'),
      '#description' => t('Video name or title.'),
      '#required' => TRUE,
      '#default_value' => !empty($form_state['values']['title']) ? $form_state['values']['title'] : '',
      );
  $form['file_upload'] = array(
      '#type' => 'file',
      '#title' => t('Video file'),
      '#size' => 40,
      );

  $form['short'] = array(
      '#type' => 'textarea',
      '#rows' => 3,
      '#required' => TRUE,
      '#title' => t('Short description'),
      '#description' => t('Video short description.'),
      '#default_value' => $form_state['values']['short'],
      );
  $form['advanced'] = array(
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#title' => t('Advanced attributes'),
      );
  $form['advanced']['tags'] = array(
      '#type' => 'textfield',
      '#title' => t('Tags'),
      '#description' => t('Associated tags, separated by comma.'),
      '#default_value' => $form_state['values']['tags'],
      );
  $form['advanced']['long'] = array(
      '#type' => 'textarea',
      '#rows' => 4,
      '#title' => t('Long description'),
      '#description' => t('Video long description.'),
      '#default_value' => $form_state['values']['long'],
      );
  $form['advanced']['linktext'] = array(
      '#type' => 'textfield',
      '#title' => t('Related link text'),
      '#description' => t('Related link description or text.'),
      '#default_value' => $form_state['values']['linktext'],
      );
  $form['advanced']['linkurl'] = array(
      '#type' => 'textfield',
      '#title' => t('Related link url'),
      '#description' => t('Related link URL.'),
      '#default_value' => $form_state['values']['linkurl'],
      );
  /*  $form['attach'] = array(
      '#type' => 'submit',
      '#value' => t('Upload'),
      '#name' => 'upload',
      '#ahah' => array(
      'path' => 'upload/js',
      'wrapper' => 'attach-wrapper',
      'progress' => array('type' => 'bar', 'message' => t('Please wait...')),
      ),*/
  $form['submit'] = array(
      '#type' => 'submit',
      //'#name' => 'submit-' . $item['video_id'],
      '#value' => t('Attach'),
      );

  $form['#attributes'] = array('enctype' => "multipart/form-data");
  $form['#submit'] = array("brightcove_field_upload_form_submit");
  return $form;
}

/**
 * Submit callback for brightcove_field_upload_form.
 *
 * Will save a file and upload it to Brightcove.
 */
function brightcove_field_upload_form_submit($form, &$form_state) {

  $limits['extensions'] = '3g2 3gp asf avi dv flv f4v m4v mov mp4 mpeg mpg mts m2ts qt wmv';
  $validators = array(
      'file_validate_extensions' => array($limits['extensions']),
      );

  // Save new file uploads.
  if ($file = file_save_upload('file_upload', $validators,
        drupal_realpath(file_default_scheme() . ':/'))) {
    if ($file->filesize <= 0) {
      // Some uploaded files had zero size, that's an error.
      drupal_set_message(t('Uploaded file not found. Are you sure that you uploaded an existing file?'), 'error');
      return;
    }
    // Do something with $file here.


    $meta = array(
        'name' => $form_state['values']['title'],
        'shortDescription' => $form_state['values']['short'],
        'longDescription' => $form_state['values']['long'],
        'linkText' => $form_state['values']['linktext'],
        'linkURL' => $form_state['values']['linkurl'],
        'referenceId' => brightcove_generate_reference(),
        );
    if (!empty($form_state['values']['tags'])) {
      $meta['tags'] = explode(',', $form_state['values']['tags']);
    }
    $id = brightcove_upload_video($file->filepath, $meta);

    // Construct Video object with ID - we need to cache it and save to session.
    // Brightcove Media API doesn't clear it's cache when a new video is
    // uploaded, therefore the node save would fail.
    $video = new StdClass;
    $video->id = $id;
    $video->name = $form_state['values']['title'];
    brightcove_video_cache_set($id, $video);

    db_query('DELETE FROM {files} WHERE fid = %d', $file->fid);
    unlink($file->filepath);

    $return['selected'] = $form_state['values']['title'] . ' [id:' . $id . ']';
    //modalframe_close_dialog($return);

  } else {
    drupal_set_message(t('Only Video files are allowed here.'), 'error');
  }
}

/**
  * Implementation of hook_imagecache_default_presets().
  */
function brightcove_field_imagecache_default_presets() {
  $presets = array();
  $presets['brightcove_browser'] = array (
      'presetname' => 'brightcove_browser',
      'actions' => array (
        0 => array (
          'weight' => '0',
          'module' => 'imagecache',
          'action' => 'imagecache_scale_and_crop',
          'data' => array (
            'width' => '120',
            'height' => '120',
            ),
          ),
        ),
      );
  return $presets;
}

/**
 * Implements hook_field_formatter_view().
 */
function brightcove_field_field_formatter_view($entity_type, $entity, $field,
                                      $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'default':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'brightcove_field_formatter_default',
          '#element' => $item,
        );
      }
      break;
  }

  return $element;
}
