<?php

/**
 * Implements hook_menu().
 */
function brightcove_media_menu() {
  $items = array();

  $items['brightcove/media/list'] = array(
    'title' => '',
    'page callback' => 'brightcove_media_list',
    'access arguments' => array('browse videos'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_stream_wrappers().
 */
function brightcove_media_stream_wrappers() {
  return array(
    'brightcove' => array(
      'name' => t('Brightcove videos'),
      'class' => 'MediaBrightcoveStreamWrapper',
      'description' => t('Videos provided by Brightcove.'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),
  );
}

/**
 * Implements hook_media_internet_providers().
 */
function brightcove_media_internet_providers() {
  return array(
    'MediaInternetBrightcoveHandler' => array(
      'title' => 'brightcove',
      'image' => 'http://img.brightcove.com/logo-corporate-new.png',
    ),
  );
}

/**
 * Implements hook_media_parse().
 */
function brightcove_media_media_parse($embed_code) {
  $handler = new MediaInternetBrightcoveHandler($embed_code);
  return $handler->parse($embed_code);
}

/**
 * Implements hook_file_formatter_info().
 */
function brightcove_media_file_formatter_info() {
  $formatters = array();

  $formatters['brightcove_media_video'] = array(
    'label' => t('Brightcove Video'),
    'file types' => array('video'),
    'default settings' => array(),
    'view callback' => 'brightcove_media_file_formatter_video_view',
    'settings callback' => 'brightcove_media_file_formatter_video_settings',
  );

  $formatters['brightcove_media_image'] = array(
    'label' => t('Brightcove Preview Image'),
    'file types' => array('video'),
    'default settings' => array(
      'image_style' => '',
    ),
    'view callback' => 'brightcove_media_file_formatter_image_view',
    'settings callback' => 'brightcove_media_file_formatter_image_settings',
  );

  return $formatters;
}

function brightcove_media_file_formatter_video_view($file, $display, $langcode) {
  $scheme = file_uri_scheme($file->uri);
  if ($scheme == 'brightcove' && empty($file->override['wysiwyg'])) {
    $element = array(
      '#theme' => 'brightcove_field_embed',
      '#video_id' => parse_url($file->uri, PHP_URL_HOST),
      '#attached' => array(
        'js' => array(
          'http://admin.brightcove.com/js/BrightcoveExperiences.js',
        ),
      ),
    );

    return $element;
  }

  return NULL;
}

function brightcove_media_file_formatter_image_view($file, $display, $langcode) {
  $scheme = file_uri_scheme($file->uri);
  if ($scheme == 'brightcove') {
    $element = array(
      '#theme' => 'brightcove_field_formatter_entity_image_thumbnailURL',
      '#element' => array(
        'video_id' => parse_url($file->uri, PHP_URL_HOST),
      ),
      '#display' => array(
        'type' => 'entity_image_thumbnailURL',
      ),
    );

    return $element;
  }

  return NULL;
}

function brightcove_media_file_formatter_video_settings() {
  return array();
}

function brightcove_media_file_formatter_image_settings() {
  return array();
}

/**
 * Implements hook_file_formatter_default_displays().
 */
function brightcove_media_file_default_displays() {
  $default_displays = array();

  $video_display_settings = array(
    'media_large' => array(),
    'media_original' => array(),
    'media_gallery_detail' => array(),
    'media_gallery_lightbox' => array(),
  );
  foreach ($video_display_settings as $view_mode => $settings) {
    $display_name = "video__{$view_mode}__brightcove_media_video";
    $default_displays[$display_name] = (object) array(
      'api_version' => 1,
      'name' => $display_name,
      'status' => 1,
      'weight' => 2,
      'settings' => $settings,
    );
  }

  $image_display_styles = array(
    'media_preview' => '',
    'media_large' => '',
    'media_original' => '',
    'media_gallery_thumbnail' => '',
    'media_gallery_block_thumbnail' => '',
    'media_gallery_collection_thumbnail' => '',
  );
  foreach ($image_display_styles as $view_mode => $image_style) {
    $display_name = "video__{$view_mode}__brightcove_media_image";
    $default_displays[$display_name] = (object) array(
      'api_version' => 1,
      'name' => $display_name,
      'status' => 1,
      'weight' => 2,
      'settings' => array('image_style' => $image_style),
    );
  }

  return $default_displays;
}

/**
 * Implements hook_media_browser_plugin_info().
 */
function brightcove_media_media_browser_plugin_info() {
  return array(
    'brightcove' => array(
      '#weight' => 0,
    ),
  );
}

/**
 * Filter form for media video browser.
 */
function brightcove_media_browser_filter_form($form, &$form_state) {
  $form['search'] = array(
      '#type' => 'fieldset',
      '#title' => t('Filter videos'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      );
  $keywords = '';
  $form['search']['keywords'] = array(
      '#type' => 'textfield',
      '#title' => t('Keywords'),
      '#size' => 25,
      '#default_value' => $keywords,
      '#description' => t('Comma separated keywords to search for. (do not add space after comma)'),
      );

  $form['search']['search'] = array(
    '#type' => 'radios',
    '#title' => t('Search in'),
    '#options' => array('name' => t('Names and descriptions'), 'tags' => t('Tags: at least one of these'), 'and_tags' => t('Tags: all of these')),
    '#default_value' => 'name',
    '#attributes' => array(
      'class' => array('search-radio'),
    ),
    '#description' => t('"Names and descriptions" searches in Video name, short and long descriptions. Tags searches in Video associated tags.'),
  );

  $form['search']['filter'] = array(
    '#type' => 'button',
    '#name' => 'filter',
    //'#button_type' => 'filter',
    '#value' => t('Filter'),
  );
  $form['search']['reset'] = array(
    '#type' => 'button',
    '#name' => 'reset',
    //'#button_type' => 'reset',
    '#value' => t('Reset'),
  );

  return $form;
}

/**
 * Implements hook_media_browser_plugin_view().
 */
function brightcove_media_media_browser_plugin_view($plugin_name, $params) {
  switch ($plugin_name) {
    case 'brightcove':
      $filter_form = drupal_get_form('brightcove_media_browser_filter_form');
      $filter_form = drupal_render($filter_form);
      $media_path = drupal_get_path('module', 'media');
      $bcpath = drupal_get_path('module', 'brightcove_media');
      return array(
        '#title' => t('Brightcove videos'),
        '#settings' => array(
          'viewMode' => 'thumbnails',
          'getMediaUrl' => url('brightcove/media/list'),
          'multiselect' => isset($params['multiselect']) &&
                           $params['multiselect'] != 'false',
          'types' => isset($params['types']) ? $params['types'] : array(),
        ),
        '#attached' => array(
          'js' => array(
            $media_path . '/js/plugins/media.library.js',
            $bcpath . '/brightcove_media.library.js',
          ),
          'css' => array(
            //@todo: should move this.
            $media_path . '/js/plugins/media.library.css',
            $bcpath . '/brightcove_media.library.css',
          ),
        ),
        '#markup' => '<div id="container"><div id="filter-form">' . $filter_form . '</div><div id="scrollbox"><ul id="media-browser-library-list" class="media-list-thumbnails"></ul><div id="status"></div></div></div>',
      );
      break;
  }

  return NULL;
}

function brightcove_media_list() {
  global $user;

  module_load_include('browser.inc', 'media', 'includes/media');

  $params = drupal_get_query_parameters();
//
//  $start = isset($params['start']) ? $params['start'] : 0;
//  $limit = isset($params['limit']) ? $params['limit'] :
//    media_variable_get('browser_pager_limit');

  $media = array();

  $bc = brightcove_initialize();

  $bc_find_params = array();
  if (isset($params['filter'])) {
    switch ($params['filter']['search']) {
      case 'tags':
        $method = 'find_videos_by_tags';
        $bc_find_params = array('or_tags' => $params['filter']['keywords']);
        break;
      case 'and_tags':
        $method = 'find_videos_by_tags';
        $bc_find_params = array('and_tags' => $params['filter']['keywords']);
        break;

      case 'name':
      default:
        $method = 'find_videos_by_text';
        $bc_find_params = array('text' => join(' ', split(',', $params['filter']['keywords'])));
        break;
    }
  }
  else {
    $method = 'find_all_videos';
  }

  $result = NULL;
  try {
    $result = $bc->find($method, $bc_find_params);
    if (count($result)) {
      foreach ($result as $video) {
        $file = (object) array(
          'fid' => "v{$video->id}",
          'uid' => $user->uid,
          'filename' => check_plain($video->name),
          'uri' => "brightcove://{$video->id}",
          'filemime' => 'media/brightcove',
          'filesize' => 0,
          'status' => 1,
          'type' => 'video',
        );

        media_browser_build_media_item($file);
        $media[] = $file;
      }
    }
  }
  catch (Exception $e) {
    watchdog('brightcove', 'Retrieving media list failed.', array(),
      WATCHDOG_ERROR);
  }

  drupal_json_output(array('media' => $media));
  exit;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function brightcove_media_ctools_plugin_api($owner, $api) {
  static $api_versions = array(
    'file_entity' => array(
      'file_default_displays' => 1,
    ),
  );

  return isset($api_versions[$owner][$api]) ?
    array('version' => $api_versions[$owner][$api]) : NULL;
}

/**
 * Implements hook_element_info_alter().
 */
function brightcove_media_element_info_alter(&$type) {
  if (isset($type['media']['#process'])) {
    array_unshift($type['media']['#process'],
      'brightcove_media_media_element_process');
  }
}

function brightcove_media_media_element_process(&$element, &$form_state) {
  if (isset($element['#value']['fid']) &&
      strpos($element['#value']['fid'], 'v') === 0) {
    $video_id = substr($element['#value']['fid'], 1);
    $candidates = file_load_multiple(array(),
      array('uri' => "brightcove://{$video_id}"));
    if (count($candidates)) {
      $element['#value']['fid'] = array_shift($candidates)->fid;
    }
    else {
      $handler = new MediaInternetBrightcoveHandler($video_id);
      $element['#value']['fid'] = $handler->save()->fid;
    }

    form_set_value($element, $element['#value'], $form_state);
  }
  return $element;
}
