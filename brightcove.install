<?php
/**
 * @file
 * Brightcove install file.
 */

/**
 * Implements hook_requirements().
 */
function brightcove_requirements($phase) {
  $requirements = array();

  $requirements['brightcove'] = array(
    'title' => 'Brightcove API',
  );

  // Check for API availability.
  if (!class_exists('Brightcove\API\API')) {
    $requirements['brightcove'] += array(
      'description' => t("Missing Brightcove API from the vendor folder"),
      'severity' => REQUIREMENT_ERROR,
    );
  }

  // If everything passes show that the Brightcove API is installed
  // successfully.
  if (!isset($requirements['severity']) || $requirements['severity'] == REQUIREMENT_OK) {
    $requirements['brightcove'] += array(
      'description' => t('Installed'),
      'severity' => REQUIREMENT_OK,
    );
  }

  return $requirements;
}

/**
 * Implements hook_schema().
 */
function brightcove_schema() {
  $schema = [];

  $schema['brightcove_callback'] = [
    'description' => 'The callback token for each Brightcove ingestion notification',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary key'
      ],
      'token' => [
        'type' => 'char',
        'length' => 43,
        'not null' => TRUE,
        'description' => 'Random-generated token to identify the video for the Brightcove callback'
      ],
      'video_id' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'BrightcoveVideo entity ID',
      ],
      'expires' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Expiration date of the callback token'
      ],
    ],
    'primary key' => ['id'],
    'unique keys' => ['token' => ['token']],
  ];

  return $schema;
}
