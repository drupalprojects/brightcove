<?php
/**
 * @file
 * Brightcove install file.
 */
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Updater\UpdaterException;
use Drupal\key\Entity\Key;

/**
 * Implements hook_requirements().
 */
function brightcove_requirements($phase) {
  $requirements = [];

  $requirements['brightcove'] = [
    'title' => 'Brightcove API',
  ];

  // Check for API availability.
  if (!class_exists('Brightcove\API\API')) {
    $requirements['brightcove'] += [
      'description' => t('Missing Brightcove API from the vendor folder.'),
      'severity' => REQUIREMENT_ERROR,
    ];
  }

  // If everything passes show that the Brightcove API is installed
  // successfully.
  if (!isset($requirements['severity']) || $requirements['severity'] == REQUIREMENT_OK) {
    $requirements['brightcove'] += [
      'description' => t('Installed'),
      'severity' => REQUIREMENT_OK,
    ];
  }

  return $requirements;
}

/**
 * Copy values from brightcove_callback table to a expirable key value store.
 */
function brightcove_update_8100(&$sandbox) {
  // Get database connection.
  $database = \Drupal::database();

  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['max'] = $database->select('brightcove_callback', 'bc')
      ->fields('bc', ['id'])
      ->countQuery()
      ->execute()
      ->fetchField();
  }

  $key_value_expirable = \Drupal::keyValueExpirable('brightcove_callback');
  $entries = $database->select('brightcove_callback')
    ->fields('brightcove_callback')
    ->orderBy('id', 'ASC')
    ->range($sandbox['progress'], 50)
    ->execute()
    ->fetchAll();
  foreach ($entries as $entry) {
    $sandbox['progress']++;

    if (REQUEST_TIME < $entry->expires) {
      $key_value_expirable->setWithExpire($entry->token, $entry->video_id, $entry->expires - REQUEST_TIME);
    }
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
}

/**
 * Drop brightcove_callback table.
 */
function brightcove_update_8101() {
  \Drupal::database()
    ->schema()
    ->dropTable('brightcove_callback');
}

/**
 * Update BrightcoveAPIClient config entity's schema.
 */
function brightcove_update_8102() {
  $config_factory = \Drupal::configFactory();
  foreach ($config_factory->listAll('brightcove.brightcove_api_client.') as $brightcove_api_client_config) {
    $config = $config_factory->getEditable($brightcove_api_client_config);
    $config->clear('access_token');
    $config->clear('access_token_expire_date');
    $config->save(TRUE);
  }
  drupal_flush_all_caches();
}

/**
 * Sets a default callback for the reference_id.
 */
function brightcove_update_8103() {
  /** @var \Drupal\Core\Field\BaseFieldDefinition $installed_field_definition */
  $installed_field_definition = \Drupal::entityDefinitionUpdateManager()->getFieldStorageDefinition('reference_id', 'brightcove_video');
  $installed_field_definition->setDefaultValueCallback('\Drupal\brightcove\Entity\BrightcoveVideo::getDefaultReferenceId');
  \Drupal::entityDefinitionUpdateManager()->updateFieldStorageDefinition($installed_field_definition);

  /** @var \Drupal\Core\Field\BaseFieldDefinition $installed_field_definition */
  $installed_field_definition = \Drupal::entityDefinitionUpdateManager()->getFieldStorageDefinition('reference_id', 'brightcove_playlist');
  $installed_field_definition->setDefaultValueCallback('\Drupal\brightcove\Entity\BrightcovePlaylist::getDefaultReferenceId');
  \Drupal::entityDefinitionUpdateManager()->updateFieldStorageDefinition($installed_field_definition);
}

/**
 * Updates the entity with the video_url base field.
 */
function brightcove_update_8104() {
  $storage_definition = BaseFieldDefinition::create('uri')
    ->setLabel(t('Video source URL'))
    ->setDisplayOptions('form', [
      'type' => 'uri',
    ])
    ->setDisplayOptions('view', [
      'type' => 'uri_link',
      'label' => 'inline',
      'settings' => [
        'trim_length' => 150,
        'target' => '_blank',
      ],
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('video_url', 'brightcove_video', 'brightcove_video', $storage_definition);
}

/**
 * Update BrightcoveAPIClient config entity's schema to use the key repository.
 */
function brightcove_update_8105() {
  /** @var \Drupal\Core\Extension\ModuleHandler $module_handler */
  $module_handler = \Drupal::service('module_handler');

  if (!$module_handler->moduleExists('key')) {
    throw new UpdaterException('The required key.module is not installed, please install it.');
  }

  try {
    $config_factory = \Drupal::configFactory();
    foreach ($config_factory->listAll('brightcove.brightcove_api_client.') as $brightcove_api_client_config) {
      $config = $config_factory->getEditable($brightcove_api_client_config);

      if (!empty($config->get('secret_key'))) {
        $key = new Key([
          'id' => "brightcove_secret_{$config->get('id')}",
          'label' => "Brightcove ({$config->get('label')})",
          'description' => 'Brightcove API Secret key.',
          'key_type' => 'authentication',
          'key_provider' => 'config',
          'key_provider_settings' => [
            'key_value' => $config->get('secret_key'),
          ],
        ], 'key');
        $key->save();

        $config->clear('secret_key');
        $config->set('secret_key_id', $key->id());
        $config->save(TRUE);
      }
    }
  }
  catch (Exception $e) {
    throw new UpdaterException($e->getMessage(), $e->getCode(), $e->getPrevious());
  }

  drupal_flush_all_caches();
}
